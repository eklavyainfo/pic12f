 *'*&).88D ' 34=346"!%  34?=347"!"! ;(&+).888D ("?/+?9;%E &+*+(&+)D ;!".  (>(&+)HD %I""%#%$"" %34*&)D %I"!JE%$"/E%9F'A! $ /9D</89F %%#"A$!/79D3&;&+)8D ' " (%E!%</3&;&+9FJ :" 2%%E!%%$ ;(C");'BDK2/;(C"59"##%*+*7L6F(B3)8D &+)D ;!"A;(E"" 34*&% JK2/;(C"L792"#*+*HH?F(B3)D&+)8D ;!"A;(E"" 34*&% J
/*
 * File:   led.c
 * Author: Ravi
 *
 * Created on 24 February, 2021, 10:35 PM
 */


// PIC12F683 Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = INTOSCIO  // Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function on RA5/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // MCLR Pin Function Select bit (MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Detect (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#define _XTAL_FREQ 8000000
#include <xc.h>
#include <xc.h>

void main(void) {
  OSCCON = 0x70; // switch to 8MHz system clock
  GPIO = 0x00;
  ANSEL = 0x00;
  TRISIO = 0x00;
  ADCON0 = 0x00;
  CMCON0 = 7;
    while(1)
    {
        GP0 = 1;
        __delay_ms(500); // wait 500 milliseconds
        GP0 = 0;
        __delay_ms(500); // wait 500 milliseconds
    }
return;
     
}
